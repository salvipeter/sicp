1.1: Programming basics
1.2: Iteration and recursion
1.3: Higher-order programming

2.1: Data abstraction
2.2: Closures
2.3: Symbolic programming
2.4: Data representation
2.5: Generic programming

3.1: Object-oriented programming
3.2: Variable environments
3.3: Mutable data
3.4: Concurrency
3.5: Thunks and infinite streams

4.1: Evaluator for Scheme
4.2: - with lazy evaluation
4.3: - with nondetermenistic evaluation
4.4: Evaluator for Prolog(-like language)

5.1: How to design a register-machine
5.2: Simulator for a register-machine
5.3: How to implement garbage collection
5.4: Evaluator for Scheme written in the register-machine
5.5: Compiler for Scheme into register-machine code,
     calling compiled code from interpreted code and vice versa

Finale:

Exercise 5.50: Compiling the evaluator from 4.1 into register-machine
  code, so we can run Scheme code in an interpreter that is compiled
  into register-machine code and run in a register-machine simulator
  written in Scheme.

Exercise 5.51: Scheme interpreter written in C

Exercise 5.52: Scheme compiler (written in Scheme) into C
